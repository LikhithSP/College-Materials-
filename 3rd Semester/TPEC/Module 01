1. Sum and difference of two numbers

    int a,b;
    float c,d;
    scanf("%d %d",&a,&b);
    scanf("%f %f",&c ,&d);
    int int_sum = a+b;
    int int_diff = a-b;
    float float_sum = c+d;
    float float_diff = c-d;
    printf("%d %d\n",int_sum,int_diff);
    printf("%0.1f %0.1f", float_sum,float_diff);

2. Playing with characters

    char ch;
    char s[24];
    char t[100];
    scanf("%c", &ch);
    scanf("%s", s);
    getchar();
    scanf("%[^\n]%*c", t);
    printf("%c\n", ch);
    printf("%s\n", s);
    printf("%s\n", t);

3.Conditional statements in C

if (n==1){
printf("one");
}
else if(n==2){
printf("two");
}
else if(n==3){
printf("three");
}
else if(n==4){
printf("four");
}
else if(n==5){
printf("five");
}
else if(n==6){
printf("six");
}
else if(n==7){
printf("seven");
}
else if(n==8){
printf("eight");
}
else if(n==9){
printf("nine");
}
else if(n>9){
printf("Greater than 9");
}

4. Valid Paranthesis

int isBalanced(char* text) {
    int i;
    for (i = 0; i < strlen(text); i++) {
        if (text[i] == '(' || text[i] == '[' || text[i] == '{') {
            push(text[i]);
        } else if (text[i] == ')' || text[i] == ']' || text[i] == '}') {
            if (top == -1) {
                return 0; // If no opening bracket is present
            } else if (!is_matching_pair(pop(), text[i])) {
                return 0; // If closing bracket doesn't match the last opening bracket
            }
        }
    }

5. Bitwise Operators

 int max_and = 0, max_or = 0, max_xor = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            int temp_and = i & j;
            int temp_or = i | j;
            int temp_xor = i ^ j;
            if (temp_and > max_and && temp_and < k) {
                max_and = temp_and;
            }
            if (temp_or > max_or && temp_or < k) {
                max_or = temp_or;
            }
            if (temp_xor > max_xor && temp_xor < k) {
                max_xor = temp_xor;
            }
        }
    }
    printf("%d\n%d\n%d", max_and, max_or, max_xor);
